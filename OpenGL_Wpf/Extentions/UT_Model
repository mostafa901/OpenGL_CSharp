namespace Simple_Engine.Simple_Engine.Views.ThreeD.Extentions
{
//https://github.com/LapisSea/OpenGL-Bullet-engine/blob/master/src/com/lapissea/opengl/resources/model/ModelUtil.java
public static class UT_Model
{
private static boolean checkNoProvoking(IntList indices, int faceSize, int pos) {
		int usedId=indices.getInt(pos);
		for(int i=0;i<indices.size();i+=faceSize) {
			if(indices.getInt(i)==usedId)return false;
		}
		return true;
	}
	public static void fixIndexedFlatShading(/*all model data in indexed form*/ModelDataBuilder model, int faceSize, /*attributes of date before it was indexed (for getting accurate data) ==>*/ float[] unindexedVertices, int[] unindexedMaterialIds, float[] unindexedNormals, float[] unindexedUvs){
		Vec3f copyVec=new Vec3f();
		
		for(int faceNum=0,faceCount=model.indices.size()/faceSize;faceNum<faceCount;faceNum++){
			int faceStart=faceNum*faceSize;
			
			if(checkNoProvoking(model.indices,faceSize,faceStart)) continue; //check if there is any collision
			
			//rotate faces to increase indexing efficiency
			boolean success=false;
			int rotCount=1;// no need to check position 0 because that's already checked above
			for(;rotCount<faceSize;rotCount++){
				if(checkNoProvoking(model.indices,faceSize,faceStart+rotCount)){//
					success=true;
					break;
				}
			}
			if(success){
				int mat=0,old=faceNum*faceSize;//get data of the face that should be on the provoking vertex
				float u=0,v=0;
				if(!model.normals.isEmpty()) copyVec.load(old*3, unindexedNormals);
				if(!model.materials.isEmpty()) mat=unindexedMaterialIds[old];
				if(!model.uvs.isEmpty()){
					u=unindexedUvs[old*2+0];
					v=unindexedUvs[old*2+1];
				}
				
				//rotate indexes in face to move provoking vertex to a free position
				int[] org=model.indices.subList(faceStart, faceStart+faceSize).toIntArray();
				for(int j=0;j<faceSize;j++){
					int pos=j-rotCount;
					if(pos<0) pos+=faceSize;
					model.indices.set(pos+faceStart, org[j]);
				}
				
				//set accurate face data
				int pos=model.indices.getInt(faceStart);
				if(!model.normals.isEmpty()){
					copyVec.write(pos*3, model.normals);
				}
				if(!model.uvs.isEmpty()){
					model.uvs.set(pos*2+0, u);
					model.uvs.set(pos*2+1, v);
				}
				if(!model.materials.isEmpty()) model.materials.set(pos, mat);
				
				continue;
			}
			
			//all vertices are used in face... a new vertex needs to be generated
			
			//it's fastest to just append vertex to end of model
			model.indices.set(faceStart,model.vertices.size()/3);
			
			int pos=faceNum*faceSize;
			copyVec.load(pos*3, unindexedVertices).put(model.vertices);//load and put are a convenient way to copy data
			if(!model.normals.isEmpty()) copyVec.load(pos*3, unindexedNormals).put(model.normals);
			if(!model.uvs.isEmpty()){
				model.uvs.add(unindexedUvs[pos*2+0]);
				model.uvs.add(unindexedUvs[pos*2+1]);
			}
			if(!model.materials.isEmpty()) model.materials.add(unindexedMaterialIds[pos]);
		}
	}
}

